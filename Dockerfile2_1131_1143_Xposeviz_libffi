ARG UBUNTU_VERSION=20.04
ARG CUDA_VERSION=11.4.3
ARG CUDNN_VERSION=8
FROM nvidia/cuda:${CUDA_VERSION}-cudnn${CUDNN_VERSION}-devel-ubuntu${UBUNTU_VERSION}

USER root
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-c"]
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    ccache \
    cmake \
    curl \
    git \
    libfreetype6-dev \
    libhdf5-serial-dev \
    libzmq3-dev \
    libjpeg-dev \
    libpng-dev \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgl1 \
    pkg-config \
    software-properties-common \
    ssh \
    sudo \
    unzip \
    wget \
    vim 
#\  libncurses5-dev libncursesw5-dev
RUN rm -rf /var/lib/apt/lists/*

ARG PYTHON_VERSION=3.8
RUN apt update && apt install -y --no-install-recommends \
    python${PYTHON_VERSION} python${PYTHON_VERSION}-dev python${PYTHON_VERSION}-venv python3-pip 
#    cuda-10-1 # nvidia-smi conflicts

#metrabs
RUN apt install build-essential --yes gfortran tar

# tensorflow profiling
ENV PATH /usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH /usr/local/cuda-${CUDA_VERSION}/targets/x86_64-linux/lib:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/lib:$LD_LIBRARY_PATH
# nvidia/cuda: base(x) runtime(x) devel(o)
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf && \
    ldconfig

# ssh
RUN echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config && \
    echo "PermitEmptyPasswords yes" >> /etc/ssh/sshd_config && \
    echo "UsePAM no" >> /etc/ssh/sshd_config

# miniconda
ENV LANG C.UTF-8
RUN curl -o /tmp/miniconda.sh -sSL http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    chmod +x /tmp/miniconda.sh && \
    bash /tmp/miniconda.sh -bfp /usr/local && \
    rm /tmp/miniconda.sh
RUN conda update -y conda

# add user
ARG UID=1000
ARG USER_NAME=genblox
RUN adduser $USER_NAME -u $UID --quiet --gecos "" --disabled-password && \
    echo "$USER_NAME ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/$USER_NAME && \
    chmod 0440 /etc/sudoers.d/$USER_NAME
USER $USER_NAME

# metrabs 
ARG ENV_NAME=metrabs
RUN conda create -n ${ENV_NAME} python=${PYTHON_VERSION}
ENV PATH /usr/local/envs/$CONDA_ENV_NAME/bin:$PATH
RUN echo "source activate ${ENV_NAME}" >> ~/.bashrc
RUN source activate ${ENV_NAME} && \
    conda install -c defaults -c conda-forge \
    matplotlib imageio ffmpeg scikit-image scikit-learn tqdm numba cachetools Cython Pillow mayavi &&\ 
    pip install tensorflow tensorflow-addons attrdict importlib_resources jpeg4py imageio-ffmpeg transforms3d more_itertools spacepy einops yacs opencv-python
#USER root 
#RUN wget http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi7_3.3-4_amd64.deb &&\
#    dpkg -i libffi7_3.3-4_amd64.deb
#USER $USER_NAME    
RUN source activate ${ENV_NAME} &&\
    conda install -y -c anaconda ncurses libffi=3.4
RUN source activate ${ENV_NAME} &&\
    pip install git+https://github.com/isarandi/poseviz &&\
#    conda install poseviz -c isarandi &&\
    pip install nvidia-tensorrt --extra-index-url https://pypi.ngc.nvidia.com
#COPY --chown=$USER_NAME install_dependencies.sh ./

# Install my fork of the COCO tools, used for managing runlength-encoded (RLE) masks.
# The additional functionality in my fork is for mask inversion in RLE, which is only needed for generating the MuCo dataset.
WORKDIR /home/$USER_NAME
RUN git clone https://github.com/isarandi/cocoapi
WORKDIR /home/$USER_NAME/cocoapi/PythonAPI
RUN source activate ${ENV_NAME} &&\
    make &&\
    python setup.py install
WORKDIR /home/$USER_NAME
RUN rm -rf cocoapi

# We need to install the [CDF library](https://cdf.gsfc.nasa.gov/) because Human3.6M supplies the annotations as cdf files.
# We read them using the [SpacePy](https://spacepy.github.io/) Python library, which in turn depends on the CDF library.
RUN wget https://spdf.gsfc.nasa.gov/pub/software/cdf/dist/cdf37_1/linux/cdf37_1-dist-cdf.tar.gz
RUN tar xf cdf37_1-dist-cdf.tar.gz
RUN rm cdf37_1-dist-cdf.tar.gz
WORKDIR /home/$USER_NAME/cdf37_1-dist
RUN source activate ${ENV_NAME} && \
    make OS=linux ENV=gnu CURSES=yes FORTRAN=no UCOPTIONS=-O2 SHARED=yes -j4 all

# If you have sudo rights, simply run `sudo make install`. If you have no `sudo` rights, make sure to add the
# `cdf37_1-dist/src/lib` to the `LD_LIBRARY_PATH` environment variable (add to ~/.bashrc for permanent effect), or use GNU Stow.
# The following will work temporarily:
RUN export LD_LIBRARY_PATH=/home/$USER_NAME/cdf37_1-dist/src/lib:/home/$USER_NAME/.conda/envs/${ENV_NAME}/lib/python${PYTHON_VERSION}/site-packages/tensorrt_libs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} &&\
    export DATA_ROOT=/home/$USER_NAME 
   

WORKDIR /home/$USER_NAME

# jupyter
#ENV PATH /usr/local/envs/$CONDA_ENV_NAME/bin:$PATH
#RUN source activate ${CONDA_ENV_NAME} && \
#    conda install -c conda-forge jupyterlab && \
#    jupyter serverextension enable --py jupyterlab --sys-prefix

#RUN echo "source activate ${CONDA_ENV_NAME}" >> /home/$USER_NAME/.bashrc

# s3 
#USER $USER_NAME
#RUN pip install --user awscli==1.25.60 s3fs==2023.3.0 && mkdir -p /home/$USER_NAME/.aws

